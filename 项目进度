9.29
第三天商品分类
电商项目只看代码就行，其中的错误什么的都不进行排查
虚拟机和前端都不用了，以最快的速度把电商项目过完,仅用来过代码，最后参考还需查看完整版项目
3.14
day04 第二个视频
3.15
day05 第一个视频
3.16
day06 第一个视频
3.17
day07 第一个视频
3.18
远程调用得步骤
1、创建远程调用接口，将要调用的数据接口放到feign接口中，service-product模块中api接口就是提供原曾调用接口的数据源
在service-client模块中的service-product-client模块中的接口中远程获取api中的所有接口，要getMapping写全路径
提供远程调用的接口ProductFeignClient要标明从哪个微服务中调用的接口，然后哪个模块需要调用就
autowair注入进接口既能调用,jar包在SpringCloud中，调用数据的模块需要添加提供数据模块的依赖
提供远程调用模块要引入feign：
 <!-- 服务调用feign -->
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-openfeign</artifactId>
    <scope>provided </scope>
</dependency>
String：存储一个单独的常量，变量 {记录当前商品被访问的次数}
Set: 获取两个结果集的交集
List: 在队列的使用场景下 lpush ，pop ,秒杀。
Hash: 主要用于存储对象
ZSet: 排序
flash db 清空缓存

redis使用步骤
1、引入jar包，在service-util中
2、制作配置类 service-util RedisConfig
redis总结：
    1.	导入依赖
    2.	配置工具类型
    3.	有了缓存以后，明确数据查询流程！
    4.	什么情况下，判断好使用哪个数据类型！
3.22
分布式锁：redis锁
day08是Redis缓存和aop思想结合的一天，如果日后复习可重看此日内容
redis：setNX就是锁，在key的有效期内都是在锁定的状态
使用lua脚本来配合redis实现删除key的原子性,集群情况下依旧有问题
最终方案是使用redisson, redissonClient的lock来解决
ctrl art m 提出方法
商品详情使用的数据类型是String，
如果使用hash类型需要一个info取多次数据，性能变慢，好处是可以方便修改对象数据，但商品详情只用来展示
不会修改，所以选择string类型来存放
使用aop方式将数据放入缓存中 、动态代理
git config --global --unset https.proxy
缓存用redistemplate操作，分布式锁用redisson做
分布式锁是用来解决缓存击穿问题
3.23
day09
取消rebase
git rebase --abort
for(Iterator<String> iterator = map.keySet().iterator;iterator.hasNext()){
keySet,获取map中所有的key
}
@MapKey("id")
sql中查出来的id就是Map的key
异步编排是并行来实现商品详情的数据渲染
以后如果想回顾这些知识点，应该去看老师的笔记，再去查相关文档，视频是最后的选择
3.24
day09 结束，异步编排和流式编程，流式编程将所需数据分类
3.25
使用线程池引用前要自定义一下其中的参数
@Configuration用于定义配置类，可替换xml配置文件，被注解的类内部包含有一个或多个被@Bean注解的方法，
这些方法将会被AnnotationConfigApplicationContext或AnnotationConfigWebApplicationContext类进行扫描，
并用于构建bean定义，初始化Spring容器。
学习的时候不要听歌，人和人是不一样的，有些人听歌可以提升专注力，而我听歌反而会打断我的专注，不能静下心来进行深度思考，
所以听歌的是偶不学习，学习的时候不听歌，找到适合自己的方法才是最重要的
day10
    es是倒排索引 技术

long double text date es的数据类型
操作es用kibanna可视化工具
index索引库
Type相当于数据库的表，存储据都在这里，es数据都存在这里
Document相当于数据库的一行数据
filed一行中的一个字段
mapping规定了file的字段和数据类型

es查询方式，先查询后过滤，先过滤后查询
第五个视频
3.28
item模块是商品详情
list模块是商品搜索
商品上架是把mysql数据库中的商品放到es中
下架就是从es中删除
不能提升自己知识的代码就直接copy过来
有没写过的可以自己写一些
day10第九个视频
3.30
redis 的String用来存商品详情，Zset用来存商品热度排名，hash用来存    list用来存
day10第12个视频 编写热度排名接口
day10最后一个视频中有feign远程调用的例子
4.01
day10结束
4.02
day11
es的agg聚合相当于mysql的group by
day11视频结束了，代码没写，只有一个接口，全文搜索getList()
4.06
day12 第六个视频，该单点登录了
4.07
单点登录
单体架构是存放再session中，在服务器tomcat中，用setAttribut,getAttribut
微服务有多个tomcat，所以不能存session中，存在缓存中，可以贯穿整个项目
token就是登录门票，在cookie中,是前台将token放入cookie中的，同时设置了过期时间等等
在缓存中放入token的同时也要将本机的IP地址一同放进去，可以防止异地登录
cookie的作用域是整个浏览器，所以用户id存在cookie中要比放在缓存中更加高效
用户登录状态是7天，且登陆后中间再浏览网页不会进行有效期延期，只能是七天
手机的浏览器没有cookie，只有header，所以请求头中也有用户信息
4.08
day13
inner接口只能内部访问，通过网关进行配置，
api/order控制器也需要网关配置只能登录后才能访问
网关gateway中有GlobalFilter全局过滤器
第九个视频开始时购物车
临时用户id时为了区分不同浏览器的用户，
存储购物车用hash数据类型，因为购物车会经常改变，string是用来存固定的数据
同步操作缓存，异步操作数据库
day13视频看完了，剩购物车的代码没有写
4.11
day13代码完成，该第六个视频了，前边合并购物车的代码没写，
由于脖子太疼了，今天就不写了
4.12
HttpServletRequest request request.getParameter("id")可以获取url?后面的参数和@RequestParam(name="id" Long id)
功能一样
微服务之间传递数据得不到header中的参数，所以要写一个feign的拦截器，用requestTemplate和httpServletRequest获取到header中的参数
然后用feign来进行传递，这样就可以咋微服务之间获取到header中的参数，电商中是用户信息传递是使用的这种方法，拦截器在web_util中
这也是spring cloud 微服务传递信息的缺点，就是没有头信息
每次操作购物车都会更新购物车的缓存过期时间都是从操作时刻起七天
完成购物车模块，该订单模块了

service-user service-user-client,service-order,service-order-client,web-all
day14视频看完了，订单的代码还没写
4.13
day14的代码完成了
day15该第九个视频了，订单视频看完了，day15的订单代码还没写
4.14
订单的代码完成了
4.15
day15第九个视频开始消息队列
1、上架，2、取消订单、3、分布式事务
异步、并行、解耦、排队
kafka容易多发或少发
common中rebbit-util是自己写的




